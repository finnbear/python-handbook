# +---------+
# | Imports |
# +---------+
import sys
import requests
from Crypto import Random
from Crypto.Cipher import AES
import base64
import traceback
import ujson

# +-----------+
# | Constants |
# +-----------+

server_url = "http://localhost:4001/chat/"

block_size = 16

post_headers = {'User-Agent': 'Python 2.7'}

user_name = ""
user_key = "0123456789012345"

# +-----------+
# | Variables |
# +-----------+

# +--------+
# | main() |
# +--------+

def main():
	# Start prompts
	prompts()

# +-----------+
# | Functions |
# +-----------+

def prompts():
	# Print logo
	print("+--------------+")
	print("| Private Chat |")
	print("+--------------+")

	# Print username
	print("Logged in as " + user_name + ".")

	# Load password
	print("Loaded key with length " + str(len(user_key)) + ".")

	# Instructions
	print("Read messages: Chat$ read [number to read, default 1]")
	print("Write message: Chat$ send [message text]")

	while True:
		try:
			cmd = raw_input("Chat$ ")
			if (cmd.startswith("read")):
				max_messages = 1;
				try:
					max_messages = (int)(cmd[5:])
					print("Reading last " + str(max_messages) + " message.")
				except:
					print("Reading last 1 message.")
				result = requests.get(server_url)
				if (result.status_code == 200):
					try:
						json = result.json()
						messages = json[-max_messages:]
						for message in messages:
							messageObject = ujson.loads(message)
							user = messageObject.get('user')
							text = decrypt(messageObject.get('text'), user_key)
							print "Message from " + user + ":"
							print "|-'" + text + "'."
					except:
						print "Failed to read messages from server."
						traceback.print_exc()
				else:
					print "Failed to connect to server to read messages."
					print result
			elif (cmd. startswith("send ")):
				print("Sending...")
			else:
				print("Invalid command: '" + cmd + "'.")
		except KeyboardInterrupt:
			exit()

def post(json):
	print "Started POST..."

	# Create Payload
	payload = ujson.dumps({'json':json })
	print "|-Payload: " + payload + "."

	# Send POST request
	session = requests.Session()
	session.post(server_url,headers=headers,data=payload)
	print "|-Done."	

def encrypt(message, passphrase):
    IV = Random.new().read(AES.block_size)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(AES.block_size)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

# +---------+
# | Program |
# +---------+

main()
